{
	"information_for_contributors": [
		"This file has been converted from https://github.com/ionide/ionide-fsgrammar/blob/master/grammar/cel.json",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/ionide/ionide-fsgrammar/commit/826aa0690b4a1fb536485cc2806fa73b451fcee7",
	"name": "cel",
	"scopeName": "source.cel",
	"fileTypes": [
		"cel"
	],
	"foldingStartMarker": "",
	"foldingStopMarker": "",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#structure"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#double_tick"
		},
		{
			"include": "#definition"
		},
		{
			"include": "#attributes"
		},
		{
			"include": "#method_calls"
		},
		{
			"include": "#modules"
		},
		{
			"include": "#anonymous_functions"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#records"
		},
		{
			"include": "#cexprs"
		},
		{
			"include": "#text"
		}
	],
	"repository": {
		"anonymous_functions": {
			"patterns": [
				{
					"name": "function.anonymous",
					"begin": "\\b(fun)\\b",
					"end": "(->)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.function-definition.cel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.other.cel"
						}
					},
					"patterns": [
						{
							"include": "#variables"
						}
					]
				}
			]
		},
		"attributes": {
			"patterns": [
				{
					"name": "support.function.attribute.cel",
					"begin": "\\[\\<",
					"end": "\\>\\]",
					"patterns": [
						{
							"include": "$celf"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.cel",
					"begin": "(\\(\\*(?!\\)))",
					"end": "(\\*\\))",
					"beginCaptures": {
						"1": {
							"name": "comment.block.cel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "comment.block.cel"
						}
					}
				},
				{
					"name": "comment.line.double-slash.cel",
					"match": "//.*$"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.unit.cel",
					"match": "\\(\\)"
				},
				{
					"name": "constant.numeric.floating-point.cel",
					"match": "\\b-?[0-9][0-9_]*((\\.([0-9][0-9_]*([eE][+-]??[0-9][0-9_]*)?)?)|([eE][+-]??[0-9][0-9_]*))"
				},
				{
					"name": "constant.numeric.integer.nativeint.cel",
					"match": "\\b(-?((0(x|X)[0-9a-fA-F][0-9a-fA-F_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)|([0-9][0-9_]*)))"
				},
				{
					"name": "constant.others.cel",
					"match": "\\b(true|false|null|unit)\\b"
				}
			]
		},
		"definition": {
			"patterns": [
				{
					"name": "binding.cel",
					"begin": "\\b(val mutable|val|let mutable|let inline|let|member|static member|override|let!)(\\s+rec|mutable)?(\\s+\\[\\<.*\\>\\])?\\s*(private|internal|public)?\\s+(\\([^-]*\\)|\\[[^-=]*\\]|[_[:alpha:]]([_[:alpha:]0-9,\\._]|(?<=,)\\s)*|``[_[:alpha:]]([_[:alpha:]0-9,\\._`\\s]|(?<=,)\\s)*)",
					"end": "((``.*``)|(with)|=|$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.binding.cel"
						},
						"2": {
							"name": "keyword.other.function-recursive.cel"
						},
						"3": {
							"name": "support.function.attribute.cel"
						},
						"4": {
							"name": "keyword.other.access.cel"
						},
						"5": {
							"name": "variable.other.binding.cel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "keyword.other.cel"
						},
						"2": {
							"name": "variable.other.binding.cel"
						},
						"3": {
							"name": "keyword.other.cel"
						}
					},
					"patterns": [
						{
							"include": "#variables"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other.cel",
					"match": "\\b(function|yield!|yield|class|match|delegate|of|new|in|as|if|then|else|elif|for|begin|end|inherit|do|let\\!|return\\!|return|interface|with|abstract|member|try|finally|and|when|use|use\\!|struct|while|mutable)\\b"
				},
				{
					"name": "meta.preprocessor.cel",
					"begin": "^\\s*#\\s*(light)\\b",
					"end": "(\\s|$)"
				},
				{
					"name": "keyword.other.cel",
					"match": "(&&&|\\|\\|\\||\\^\\^\\^|~~~|<<<|>>>|\\|>|\\->|\\<\\-|:>|:\\?>|:|\\[|\\]|\\;|<>|=|@|\\|\\||&&|{|}|\\||_|\\.\\.|\\+|\\-|\\*|\\/|\\^|\\!|\\>|\\>\\=|\\>\\>|\\<|\\<\\=|\\<\\<)"
				}
			]
		},
		"modules": {
			"patterns": [
				{
					"name": "entity.name.section.cel",
					"begin": "\\b(namespace|module)\\s*(public|internal|private)?\\s+([[:alpha:]][[:alpha:]0-9'_. ]*)",
					"end": "(\\s|$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.cel"
						},
						"2": {
							"name": "keyword.other.cel"
						},
						"3": {
							"name": "entity.name.section.cel"
						}
					},
					"patterns": [
						{
							"name": "entity.name.section.cel",
							"match": "(\\.)([A-Z][[:alpha:]0-9'_]*)",
							"captures": {
								"1": {
									"name": "punctuation.separator.namespace-reference.cel"
								},
								"2": {
									"name": "entity.name.section.cel"
								}
							}
						}
					]
				},
				{
					"name": "namespace.open.cel",
					"begin": "\\b(open)\\s+([[:alpha:]][[:alpha:]0-9'_]*)(?=(\\.[A-Z][[:alpha:]0-9_]*)*)",
					"end": "(\\s|$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.cel"
						},
						"2": {
							"name": "entity.name.section.cel"
						}
					},
					"patterns": [
						{
							"name": "entity.name.section.cel",
							"match": "(\\.)([[:alpha:]][[:alpha:]0-9'_]*)",
							"captures": {
								"1": {
									"name": "punctuation.separator.namespace-reference.cel"
								},
								"2": {
									"name": "entity.name.section.cel"
								}
							}
						}
					]
				},
				{
					"name": "namespace.alias.cel",
					"begin": "^\\s*(module)\\s+([A-Z][[:alpha:]0-9'_]*)\\s*(=)\\s*([A-Z][[:alpha:]0-9'_]*)",
					"end": "(\\s|$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.namespace-definition.cel"
						},
						"2": {
							"name": "entity.name.type.namespace.cel"
						},
						"3": {
							"name": "punctuation.separator.namespace-definition.cel"
						},
						"4": {
							"name": "entity.name.section.cel"
						}
					},
					"patterns": [
						{
							"name": "entity.name.section.cel",
							"match": "(\\.)([A-Z][[:alpha:]0-9'_]*)",
							"captures": {
								"1": {
									"name": "punctuation.separator.namespace-reference.cel"
								},
								"2": {
									"name": "entity.name.section.cel"
								}
							}
						}
					]
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.literal.cel",
					"begin": "(?=[^\\\\])(@\")",
					"end": "(\")(?!\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.cel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.cel"
						}
					},
					"patterns": [
						{
							"name": "constant.character.string.escape.cel",
							"match": "\"(\")"
						}
					]
				},
				{
					"name": "string.quoted.triple.cel",
					"begin": "(?=[^\\\\])(\"\"\")",
					"end": "(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.cel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.cel"
						}
					}
				},
				{
					"name": "string.quoted.double.cel",
					"begin": "(?=[^\\\\])(\")",
					"end": "(\")",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.string.begin.cel"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.cel"
						}
					},
					"patterns": [
						{
							"name": "punctuation.separator.string.ignore-eol.cel",
							"match": "\\\\$[ \\t]*"
						},
						{
							"name": "constant.character.string.escape.cel",
							"match": "\\\\([\\\\''ntbr]|u[a-fA-F0-9]{4}|u[a-fA-F0-9]{8})"
						},
						{
							"name": "invalid.illeagal.character.string.cel",
							"match": "\\\\(?![\\\\''ntbr]|u[a-fA-F0-9]{4}|u[a-fA-F0-9]{8})."
						}
					]
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "constant.language.unit.cel",
					"match": "\\(\\)"
				},
				{
					"name": "variable.parameter.cel",
					"match": "[[:alpha:]']\\w*"
				}
			]
		},
		"double_tick": {
			"patterns": [
				{
					"name": "variable.other.binding.cel",
					"match": "(``)(.*)(``)",
					"captures": {
						"1": {
							"name": "string.quoted.single.cel"
						},
						"2": {
							"name": "variable.other.binding.cel"
						},
						"3": {
							"name": "string.quoted.single.cel"
						}
					}
				}
			]
		},
		"records": {
			"patterns": [
				{
					"name": "record.cel",
					"match": "(type)[\\s]+(private|internal|public)?[\\s]*([[:alpha:]0-9'<>^:,._ ]+)[\\s]*(\\([[:alpha:]0-9'<>^:,._ ]+\\))?[\\s]*((with)|(as [[:alpha:]0-9']+)|(=)|(\\(\\)))",
					"captures": {
						"1": {
							"name": "keyword.other.cel"
						},
						"2": {
							"name": "keyword.other.cel"
						},
						"3": {
							"name": "entity.name.type.cel"
						},
						"4": {
							"name": "entity.name.type.cel"
						},
						"6": {
							"name": "keyword.other.cel"
						},
						"7": {
							"name": "keyword.other.cel"
						},
						"8": {
							"name": "keyword.other.cel"
						},
						"9": {
							"name": "constant.language.unit.cel"
						}
					}
				}
			]
		},
		"cexprs": {
			"patterns": [
				{
					"name": "cexpr.cel",
					"match": "\\b([[:alpha:]]*\\s+\\{)",
					"captures": {
						"1": {
							"name": "keyword.other.cel"
						}
					}
				}
			]
		},
		"chars": {
			"patterns": [
				{
					"name": "char.cel",
					"match": "('\\\\?.')",
					"captures": {
						"1": {
							"name": "string.quoted.single.cel"
						}
					}
				}
			]
		},
		"text": {
			"patterns": [
				{
					"name": "text.cel",
					"match": "\\\\"
				}
			]
		}
	}
}